
   树形目录c++实现，主要使用了boost_asio(网络通信库), boost_property_tree(树形结构库)，boost_thread(多线程库)，boost_log(日志库)，主要为了融合graphite-web与opentsdb而开发此项应用

支持的数据写入格式：
	carbon-relay与c-relay数据格式:"key value timestamp\n..."
	tsdb-relay数据格式："key value timestamp\n..."
	如：
        echo "a.b.c.d.e.f value timestamp\n...\n"|nc ip port
        echo "aa.bb.cc.dd.ee.ff timestamp value\n...\n"|nc ip port

支持的数据读取格式:直接输出json结构，供读取端使用

	echo "finder stats_byhost.openapi_profile.trigger-web-tc-oam.API.BrokerSetMessageSize"|nc localhost 8618
	{
    		"interval1": "0",
    		"total_count": "0"
	}
	
功能说明:

	1.树形目录的内存实现
	2.支持获取目录的下级目录
	3.支持集合与通配符查询
	4.支持读写分离

数据写入格式：
	echo "a.b.c.d.e.f value timestamp\n...\n"|nc ip port
	echo "aa.bb.cc.dd.ee.ff timestamp value\n...\n"|nc ip port

注意事项:
	1.为了充分使用cpu的资源，当节点定义为写的节点时，线程数建议与cpu数相等，当节点定义为读的节点时，线程数与读取数的进程数一致为最佳（如http的进程数为256，线程数为256）
	2.若前端为代理，为了充分利用后端的资源，建议代理端配置多个同样的ip与端口便于创建多个连接，充分利用后端资源
	3.当定义结点为读取数据时，需保证存储文件与写入节点的存储文件一致，可以使用rsync的方式保证数据同步

已知问题：
	1.树形结构调用clear()方法时不释放内存，需要后续调试跟进
	2.当为读的节点时,使用ostringstrem对象时会不定时的抛出异常：
	nate called after throwing an instance of ‘std::bad_alloc'
  	what():  std::bad_alloc

安装过程:
编译并安装boost库:
	cd boost_1_59_0;
	./b2 clean
	./b2
	./b2 install

安装qmake-qt4
	yum install qt4-devel

生成Makefile:
	qmake-qt4 ./metric-tree.pro

编译文件：
	make clean;make
安装:
	/bin/sh install.sh

执行程序：
	service metric-tree-read start

查看配置文件: cat ./conf/metric-tree.ini 
	[main]

	#1.为了充分使用cpu的资源，当节点定义为写的节点时，线程数建议与cpu数相等，当节点定义为读的节点时，线程数与读取数的进程数一致为最佳（如http的进程数为256，线程数为256）
	#2.若前端为代理，为了充分利用后端的资源，建议代理端配置多个同样的ip与端口便于创建多个连接，充分利用后端资源
	threadCount=32

	#执行finder命令的端口
	cmdport=7618

	#当节点为写入的节点时此配置有效
	port=6618

	#存储树形结构数据的路径
	dataDir=/data2/metric-tree/metric-tree.json

	#是否以daemon方式运行
	daemon=true

	#存储读写时的锁文件
	storeLockFile=/tmp/metric-tree-6618.lock

	#进程运行pid文件
	pidFile=/tmp/metric-tree-6618.pid

	#多长时间把内存的数据写入磁盘
	flushInterval=600

	#多长时间从存储读数据到内存，当节点为读的节点时此配置有效
	reloadInterval=600

	#节点是读节点还是写的节点,写入节点时值为read
	#当定义结点为读取数据时，需保证存储文件与写入节点的存储文件一致，可以使用rsync的方式保证数据同步
	nodeType=write

	readNode=0

	[log]

	#日志切割大小
	logSize=50000000

	#日志存储路径
	logPath=/data2/metric-tree/logs/6618/


查看日志文件：tail -f /data2/metric-tree/logs/8620/20151202.log 
	[2015-12-02 16:50:05.136113 0x00007f66ee05e700 info] session start from:127.0.0.1
	[2015-12-02 16:50:05.136810 0x00007f666bf8e700 info] remoteIP:127.0.0.1 finder recived cmd:finder stats_byhost.openapi_access.webv2-tc-core-inner-docker.http_2xx._2_statuses_upload_url_text_json
	[2015-12-02 16:50:05.137011 0x00007f666bf8e700 info] remoteIP:127.0.0.1 finder run cmd:finder stats_byhost.openapi_access.webv2-tc-core-inner-docker.http_2xx._2_statuses_upload_url_text_json result.size:141
	[2015-12-02 16:50:05.137150 0x00007f666bf8e700 info] session close:127.0.0.1
	[2015-12-02 16:50:05.183330 0x00007f66ee05e700 info] session start from:127.0.0.1
	[2015-12-02 16:50:05.184048 0x00007f666b58d700 info] remoteIP:127.0.0.1 finder recived cmd:finder stats_byhost.openapi_profile.mqprocessor-aliyun-test.MC
	[2015-12-02 16:50:05.184186 0x00007f666b58d700 info] remoteIP:127.0.0.1 finder run cmd:finder stats_byhost.openapi_profile.mqprocessor-aliyun-test.MC result.size:37
	[2015-12-02 16:50:05.184324 0x00007f666b58d700 info] session close:127.0.0.1 [2015-12-02 16:50:25.039407 0x00007f3d33155720 info]  Hello World!
	[2015-12-02 16:50:25.039609 0x00007f3d33155720 info]  build pidFile(/tmp/metric-tree-8620.pid) pid:7025
